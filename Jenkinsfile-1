pipeline {
    agent any

     parameters {
            booleanParam(defaultValue: true, description: 'run calculator tests', name: 'calculator')
            booleanParam(name: 'RUN_BINARY', defaultValue: true, description: 'Run BinaryCalculatorTest')
            booleanParam(name: 'RUN_DECIMAL', defaultValue: true, description: 'Run DecimalCalculatorTest')
            booleanParam(name: 'RUN_HEX', defaultValue: true, description: 'Run HexCalculatorTest')
        }

    //{
    //    booleanParam(defaultValue: true, description: 'run calculator tests', name: 'calculator')
    //}



        stages {
            stage('Binary Calculator Tests') {
                when {
                    expression { return params.RUN_BINARY }
                }
                steps {
                    echo "Running BinaryCalculatorTest"
                    bat "mvn -Dtest=calculator.BinaryCalculatorTest test"
                    bat "mvn surefire-report:report-only"
                }
            }

            stage('Decimal Calculator Tests') {
                when {
                    expression { return params.RUN_DECIMAL }
                }
                steps {
                    echo "Running DecimalCalculatorTest"
                    bat "mvn -Dtest=calculator.DecimalCalculatorTest test"
                    bat "mvn surefire-report:report-only"
                }
            }

            stage('Hex Calculator Tests') {
                when {
                    expression { return params.RUN_HEX }
                }
                steps {
                    echo "Running HexCalculatorTest"
                    bat "mvn -Dtest=calculator.HexCalculatorTest test"
                    bat "mvn surefire-report:report-only"
                }
            }
            stage('Publish HTML Report') {
                        steps {
                            publishHTML(target: [
                                reportDir: 'target/site',
                                reportFiles: 'unit-test-report.html',
                                reportName: 'Unit Test Report',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: false
                            ])
                        }
                    }


        }
        post {
                always {
                    echo 'Generating Allure Report...'
                    allure([
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: 'allure-results']]
                    ])
                }
            }



    //stages {
    //    stage("calculator") {
    //        when {
    //            expression { return params.calculator }
    //    }
    //    steps {
    //          bat "mvn test"
    //
    //    }
    //   }
    //  }

}
